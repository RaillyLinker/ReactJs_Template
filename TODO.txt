[TODO]
(1단계)
- 지리 정보 샘플 : GPS 위치 가져오기
- 지리 정보 샘플 : 주소 to 좌표, 좌표 to 주소 샘플
- 미디어 샘플 : Gif 프레임 분리 -> 이미지 프레임 리스트를 Gif 로 합치기(프레임 분리 후 가로 스크롤에 표시 후 버튼 눌러 합쳐서 다운, ffmpeg 으로 해서 다른 애니메이션 포멧과 동일하게 가능한지?)
- 미디어 샘플 : webp 프레임 분리 -> 이미지 프레임 리스트를 webp 로 합치기(프레임 분리 후 가로 스크롤에 표시 후 버튼 눌러 합쳐서 다운)
- 미디어 샘플 : avif 프레임 분리 -> 이미지 프레임 리스트를 avif 로 합치기(프레임 분리 후 가로 스크롤에 표시 후 버튼 눌러 합쳐서 다운)
- 네트워크 샘플 : webrtc
- 기타 샘플 : md 뷰어
  https://velog.io/@jswing5267/Velog-%ED%81%B4%EB%A1%A0%EC%BD%94%EB%94%A9%ED%95%98%EA%B8%B0-1-React-markdown-%EC%A0%81%EC%9A%A9%EC%8B%9C%EC%BC%9C%EB%B3%B4%EA%B8%B0
- 기타 샘플 : 이미지 선택 샘플 (로컬에서 이미지 선택/모바일 카메라 촬영시 썸네일 표시. 누르면 전체 표시, 위쪽에는 큰 동그라미, 아래쪽엔 리스트)
- 기타 샘플 : 동영상 선택 샘플 (로컬에서 영상 선택/모바일 카메라 촬영시 썸네일 표시. 호버링하면 재생됨, 위쪽에는 큰 네모, 아래쪽엔 리스트)
- 기타 샘플 : 접속자 IP 주소 가져오기 샘플

(2단계)
- 지리 정보 샘플 : 지도 샘플(주소 to 좌표 완료시 주소로 좌표 위치로 이동하고, 좌표 클릭시 주소 표시)
- 이미지 리사이징 개선 : gif, webp, avif 움직이도록 (프레임별 분리하고 리사이징 하고 결합, 각 프레임 분리 및 결합 샘플 완료시)
- 미디어 샘플 : 동영상을 gif로 변경(동영상 선택하면 동영상 전체 길이를 표시하고, 자를 시작 위치 끝위치를 입력 후 gif 변환 버튼을 누르면 해당 부분 gif 로 변환, gif 를 avif, webp 로 변환한 후)
- 미디어 샘플 : gif를 동영상으로 변경(gif 선택하면 동영상으로 변환되어 다운로드, gif 를 avif, webp 로 변환한 후)
- 기타 샘플 : md to HTML(md 뷰어 완료시)
- 기타 샘플 : HTML to md(Turndown 라이브러리 사용, md 뷰어 완료시)
- 기타 샘플 : 게시판 글 작성(Draft.js 라이브러리 사용, 작성시 우측에 미리보기 화면, html / json 저장, md 뷰어 완료시)
- 기타 샘플 : 게시판 글 작성(Draft.js 라이브러리 사용, 작성시 우측에 미리보기 화면, md 저장, md 뷰어 완료시)

(3단계)
- 미디어 샘플 : Gif 재생 조작 샘플 - 호버링하면 재생, 벗어나면 정지, Gif 를 동영상으로 만들고, 그것을 비디오로 표시한 후 이것으로 재생시간 조작 가능(gif 를 동영상으로 변경 샘플 완료시)
- 계정 샘플 (전역 변수에 계정 정보 저장하고, 페이지 복귀시 리랜더링 되는지 확인, 이미지 선택 샘플 완료시)

(4단계)
- 네트워크 소켓 샘플 : 채팅(계정과 연동하여 멀티 채팅 - 서버랑 같이 작업, 계정 샘플 완료시)

(5단계)
- 네트워크 소켓 샘플 : 화상 채팅(채팅 샘플과 연동, 채팅 샘플 완료시)

(시간 날 때)
- next js 로 바꾸는 방법
- 오디오 / 비디오 다운로드 방지 처리
    미디어 스트리밍 프로토콜 사용 (HLS 또는 DASH)
    미디어 파일을 일반 HTTP로 제공하는 대신, HLS (HTTP Live Streaming) 또는 MPEG-DASH와 같은 스트리밍 프로토콜을 사용하는 것이 좋습니다. 
    이 프로토콜들은 비디오를 작은 조각들로 스트리밍하며, 사용자가 전체 비디오 파일을 쉽게 다운로드할 수 없게 만듭니다.
    예를 들어, HLS 스트리밍을 React에서 사용하려면 video.js나 hls.js와 같은 라이브러리를 사용할 수 있습니다.
- 게임 샘플 추가 : 테트리스, 리듬게임, 벽돌깨기, 크롬 공룡게임, 지뢰찾기, 갤러그
- 기타 샘플 : HTML to PDF(정식으로 - 개발 시간 오래 걸릴듯)
- 기타 샘플 : md to pdf(정식으로 - 개발 시간 오래 걸릴듯)
- 지리 정보 샘플 : 네비게이션, 거리 계산기 등 추후 기능 추가
- https://animista.net/ 이곳의 모든 샘플 공부 및 이식
- 시간 오래 걸리는 작업 모두 로딩 처리, 예외처리
- 모바일에서 캠 사용 샘플 테스트 (https 환경에서만 된다고 함)
- 얼굴인식, 모션인식, 사물인식, 챗봇 등...
- pong 게임에 모멘텀, 저스트 클릭으로 공 속도 낮추기, 공 속도에 물리 적용, 점수제 도입, 패들 각도 관성, 
  게임 오버시 멈추기, 마우스 클릭해서 공 발사하기 로직 추가, 우측 벽에 부딪쳤을 때만 속도 up, 우측 벽에 부딪쳤을 때 히트 효과 등 개선



(gif to video - avif, webp 는 gif 로 변경 후 변경)
import React, { useState } from 'react';
import { FFmpeg } from '@ffmpeg/ffmpeg';
import { fetchFile } from '@ffmpeg/util';

const App: React.FC = () => {
  const [loading, setLoading] = useState<boolean>(false);
  const [videoURL, setVideoURL] = useState<string | null>(null);
  const [downloadURL, setDownloadURL] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const ffmpeg = new FFmpeg();

  const loadFFmpeg = async () => {
    setLoading(true);
    try {
      await ffmpeg.load();
    } catch (e) {
      setError('FFmpeg failed to load');
    } finally {
      setLoading(false);
    }
  };

  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    setLoading(true);
    setError(null);

    try {
      // Load FFmpeg if not already loaded
      if (!ffmpeg.loaded) await loadFFmpeg();

      // Read file into buffer
      const fileData = await fetchFile(file);

      // Set input file name and output file name
      await ffmpeg.writeFile(file.name, fileData);

      // Run FFmpeg command to convert the file
      await ffmpeg.exec([
        '-i', file.name,      // Input file
        '-vf', 'scale=640:-1', // Example filter to scale video
        '-c:v', 'libx264',    // Output codec
        '-preset', 'fast',    // Encoding preset
        'output.mp4'          // Output file name
      ]);

      // Read the result file
      const data = await ffmpeg.readFile('output.mp4');

      // Create a blob URL for the result
      const videoBlob = new Blob([data], { type: 'video/mp4' });
      const videoUrl = URL.createObjectURL(videoBlob);

      // Create a download URL
      const downloadUrl = URL.createObjectURL(videoBlob);

      setVideoURL(videoUrl);
      setDownloadURL(downloadUrl);
    } catch (e) {
      setError('Error occurred while converting the file');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div>
      <input type="file" accept=".gif,.webp,.avif" onChange={handleFileChange} />
      {loading && <p>Loading...</p>}
      {error && <p style={{ color: 'red' }}>{error}</p>}
      {videoURL && (
        <div>
          <h2>Converted Video:</h2>
          <video controls width="640" autoPlay loop>
            <source src={videoURL} type="video/mp4" />
            Your browser does not support the video tag.
          </video>
          <br />
          {downloadURL && (
            <a href={downloadURL} download="output.mp4">
              <button>Download Video</button>
            </a>
          )}
        </div>
      )}
    </div>
  );
};

export default App;


(video to gif - avif, webp 는 먼저 gif 변환 후 변환)
import React, { useState } from 'react';
import { FFmpeg } from '@ffmpeg/ffmpeg';
import { fetchFile } from '@ffmpeg/util';

const ffmpeg = new FFmpeg();

const VideoConverter: React.FC = () => {
  const [videoFile, setVideoFile] = useState<File | null>(null);
  const [isConverting, setIsConverting] = useState<boolean>(false);

  const loadFFmpeg = async () => {
    if (!ffmpeg.loaded) {
      await ffmpeg.load();
    }
  };

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (event.target.files && event.target.files[0]) {
      setVideoFile(event.target.files[0]);
    }
  };

  const convertVideo = async (format: 'gif' | 'avif' | 'webp') => {
    if (!videoFile) return;
    setIsConverting(true);

    await loadFFmpeg();

    const inputFileName = 'input.mp4';
    const outputFileName = `output.${format}`;

    await ffmpeg.writeFile(inputFileName, await fetchFile(videoFile));

    let command: string[] = [];
    if (format === 'gif') {
      command = ['-i', inputFileName, '-vf', 'fps=10,scale=320:-1:flags=lanczos', '-t', '5', outputFileName];
    } else if (format === 'avif') {
      command = ['-i', inputFileName, '-c:v', 'libaom-av1', '-crf', '30', '-b:v', '0', outputFileName];
    } else if (format === 'webp') {
      command = ['-i', inputFileName, '-c:v', 'libwebp', '-lossless', '0', '-q:v', '75', '-loop', '0', outputFileName];
    }

    await ffmpeg.exec(command);

    const data = await ffmpeg.readFile(outputFileName);
    const url = URL.createObjectURL(new Blob([data], { type: `image/${format}` }));
    const a = document.createElement('a');
    a.href = url;
    a.download = outputFileName;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    setIsConverting(false);
  };

  return (
    <div>
      <h2>Video to GIF/AVIF/WebP Converter</h2>
      <input type="file" accept="video/*" onChange={handleFileChange} />
      <br />
      <button onClick={() => convertVideo('gif')} disabled={!videoFile || isConverting}>
        Convert to GIF
      </button>
      <button onClick={() => convertVideo('avif')} disabled={!videoFile || isConverting}>
        Convert to AVIF
      </button>
      <button onClick={() => convertVideo('webp')} disabled={!videoFile || isConverting}>
        Convert to WebP
      </button>
      {isConverting && <p>Converting...</p>}
    </div>
  );
};

export default VideoConverter;


(WebRtc)
import React, { useState, useRef } from 'react';
import SimplePeer from 'simple-peer';

const App: React.FC = () => {
  const [myID, setMyID] = useState<string | null>(null);
  const [peerID, setPeerID] = useState<string>('');
  const [stream, setStream] = useState<MediaStream | null>(null);
  const myVideo = useRef<HTMLVideoElement>(null);
  const peerVideo = useRef<HTMLVideoElement>(null);
  const peerRef = useRef<SimplePeer.Instance | null>(null);

  // 비디오 스트림 가져오기
  React.useEffect(() => {
    navigator.mediaDevices.getUserMedia({ video: true, audio: true })
      .then((stream) => {
        setStream(stream);
        if (myVideo.current) {
          myVideo.current.srcObject = stream;
        }
      })
      .catch(err => console.error('Failed to get media stream:', err));
  }, []);

  // 내 연결 초기화
  const createPeer = () => {
    const peer = new SimplePeer({
      initiator: true,
      trickle: false,
      stream: stream!,
    });

    peer.on('signal', (data) => {
      setMyID(JSON.stringify(data));
    });

    peer.on('stream', (stream) => {
      if (peerVideo.current) {
        peerVideo.current.srcObject = stream;
      }
    });

    peerRef.current = peer;
  };

  // 상대방 연결
  const connectToPeer = () => {
    const peer = new SimplePeer({
      initiator: false,
      trickle: false,
      stream: stream!,
    });

    peer.on('signal', (data) => {
      peerRef.current?.signal(data);
    });

    peer.on('stream', (stream) => {
      if (peerVideo.current) {
        peerVideo.current.srcObject = stream;
      }
    });

    peerRef.current?.signal(JSON.parse(peerID));
  };

  return (
    <div>
      <h1>WebRTC Example</h1>
      <div>
        <h2>My Video</h2>
        <video ref={myVideo} autoPlay muted />
      </div>
      <div>
        <h2>Peer Video</h2>
        <video ref={peerVideo} autoPlay />
      </div>
      <div>
        <button onClick={createPeer}>Start Call</button>
        <textarea
          value={myID || ''}
          readOnly
          placeholder="Your ID will appear here"
        />
      </div>
      <div>
        <textarea
          value={peerID}
          onChange={(e) => setPeerID(e.target.value)}
          placeholder="Enter Peer ID"
        />
        <button onClick={connectToPeer}>Connect</button>
      </div>
    </div>
  );
};

export default App;