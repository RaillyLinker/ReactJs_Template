[Dev Life Tips]
- 에러 없는 무결점이 첫번째, 로직의 합리성과 유지보수성과 확장성이 두번째, 성능이 세번째.
    물론 예외는 존재합니다.

- index.tsx 파일에서 <React.StrictMode> 로 감싸여있다면 개발 환경에서 컴포넌트의 useEffect 가 2번 호출됩니다.
    처음 한번은 테스트를 위해 컴포넌트 생성 및 삭제를 수행하고,
    다음으로 컴포넌트를 생성하여 정상 동작을 수행할 것입니다.

- 리엑트 페이지간 router 를 사용한 이동 및 뒤로가기 앞으로가기 시에는 프로세스의 전역 변수가 유지가 됩니다.
    다만 브라우저 새로고침 버튼을 누르거나 브라우저 주소창에 주소를 입력하여 페이지를 이동시에는 전역변수가 초기화 됩니다.
    예를들어 A 페이지에서 현재 testNum 이라는 전역변수를 10 까지 증가시킨 시점에 라우터로 다음 페이지에서 전역변수를 확인하면 10이라고 확인되지만,
    주소창에 동일한 주소를 입력해서 접속하거나, 새로고침을 누른 경우에는 전역변수가 초기화됩니다.

- 템플릿의 컴포넌트 코드에서 기본 제공되는 reRender 함수를 사용하면 강제로 컴포넌트 화면을 재 랜더링 할 수 있지만 그만큼 무거울 수 있습니다.
    화면 내에서 일부만을 변경하려면 useRef 를 사용하여 각 HTML DOM 을 조작하는 방식을 사용하세요.

- useRef 사용 방식
    Business.tsx 의 멤버변수로,
    mainViewRef? : React.RefObject<HTMLDivElement>;
    위와 같이 레퍼런스 변수를 선언합니다.

    view.tsx 의 useRef 생성 구간에서는,
    mainBusiness.mainViewRef = useRef<HTMLDivElement>(null);
    위와 같이 레퍼런스 변수를 생성해주세요.

    또한, 레퍼런스를 적용할(조작을 가할) 태그에는,
    <div ref={mainBusiness.mainViewRef}>
    위와 같이 레퍼런스 옵션을 적용합니다.

    이제 Business 로직에서 해당 레퍼런스를 가지고 조작을 하면 됩니다.
    상태값이 필요한 조작이라면 Business 의 멤버변수를 사용하는 방식으로 상태값을 사용하면 되며,
    if(this.mainViewRef!= null && this.mainViewRef.current){
        this.mainViewRef.current.textContent = "hello";
    }
    위와 같은 방식으로 조작하면 됩니다.

- 페이지 진입 방식 확인하기
    react-router-dom 라이브러리를 사용한다면,

    import { useNavigationType, NavigationType } from 'react-router-dom';
    const navigationType: NavigationType = useNavigationType();
    console.log(navigationType)

    위와 같은 코드로 현재 페이지에 어떻게 진입했는지 확인할 수 있습니다.

    "PUSH" : navigate(pageUrl); 을 사용하여 페이지에 진입한 경우입니다.
    "POP" : navigate(-1);, navigate(1);, 뒤로가기, 앞으로가기, 브라우저 리플래시, 브라우저 주소창으로 진입한 경우입니다.
    "REPLACE" : navigate(pageUrl, { replace: true }); 을 사용하여 페이지에 진입한 경우입니다.

- 페이지 이동 애니메이션을 적용하려면, 각 페이지 mount, unmount 시에 페이지 전체에 대해 애니메이션을 적용하면 됩니다.
    예를들어 페이지 페이드 아웃 페이드 인 방식이라면, 페이지 unmount 시에 페이지 전체에 페이드 아웃을 하고,
    페이지 진입시에 페이드 인을 하면 됩니다.
    추가적으로 보다 응용해봅시다.
    화면의 작은 이미지를 클릭하여 다음 페이지로 이동한 경우, 해당 이미지가 커져서 페이지를 덮는 방식으로 애니메이션을 주려면,
    이동할 페이지의 처음 화면을 이전 페이지와 동일한 화면으로 구성한 후, 
    페이지가 mount 되는 순간 해당 이미지가 커지는 애니메이션을 적용하는 방식으로 구현 가능합니다.

- ReactJS SEO 최적화 방법
    1. public/robots.txt 파일을 설정합니다.
    2. SSR(Next.js 이용)을 쓰거나 react-snap 라이브러리(빌드될 때 미리 렌더링)를 사용합니다.
    3. react-helmet 라이브러리를 사용해서 페이지별 메타태그를 변경합니다.
    4. 올바른 Status Code 사용하세요.
    5. # 가 붙는 주소는 지양합시다. 구글봇은 # 뒤의 내용을 무시하는 경우가 많습니다.
    6. 링크에는 되도록 <a href> 를 사용합시다. 해당 태그가 없으면 구글이 URL 을 크롤링하지 못합니다.
    7. 로직을 통하여 컨텐츠가 나타나게 해둔 경우에는 검색에서 제외될 가능성이 높다는 것을 인지합시다.
        예를들어 어떤 버튼을 클릭하여 자바스크립트 로직으로 결과가 화면에 나타나게 만들었다면 로봇은 그러한 동작까지는 탐색하지 않습니다.
        검색에 나타내고자 하는 값의 경우는 CSS 의 visibility: hidden; 혹은 display: none; property 를 사용하여 감추어두는 방법을 사용할 수 있습니다.

- npm 라이브러리 중 동일 기능 서로 다른 라이브러리의 선정에 고민한다면,
    https://npmtrends.com/ 이곳을 참고하세요.

- 개발시 다양한 환경에서 테스트 하는 것이 좋습니다.
    기본적으로는 PC 브라우저, 모바일 웹 어플리케이션에서 UI 및 기능 테스트를 진행하고,
    더 자세히는 PC 의 주요 브라우저들, 모바일의 주요 브라우저들, 그리고 테블릿의 주요 브라우저들...
    이정도를 테스트 한다면 완벽합니다.