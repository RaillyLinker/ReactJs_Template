[ReactJs 프로젝트 설명서]
(기본 생성 파일/폴더 설명)
- tsconfig.json 파일은,
    TypeScript 프로젝트의 구성 파일입니다. 
    React 프로젝트에서 TypeScript를 사용할 때 이 파일은 중요한 역할을 합니다. 
    tsconfig.json 파일은 TypeScript 컴파일러(tsc)에게 컴파일 옵션과 프로젝트 설정을 알려줍니다. 
    
    compilerOptions : 컴파일러 옵션을 모아둔 목록입니다.

        target : TypeScript 문서를 빌드할 때 어떤 버전의 JavaScript로 변환할지 설정합니다. 예를 들어, "es5", "es6".

        lib : TypeScript 컴파일러가 어떤 라이브러리 파일들을 포함할지 지정하는 설정입니다. 
            이 라이브러리 파일들은 프로젝트의 타입 정의를 제공하며, 어떤 API들이 사용 가능한지 결정합니다. 
            예를 들어, JavaScript 표준 라이브러리의 타입 정의나 브라우저의 DOM API 등이 포함될 수 있습니다.

        allowJs : 프로젝트에 JavaScript 파일을 포함할 수 있도록 허용할지 여부입니다.
            이것이 true 라면 import 할 때 js 파일을 입력해도 에러가 나지 않습니다.

        skipLibCheck : 타입 정의 파일(.d.ts)의 타입 검사를 건너뛸지 여부입니다. true 로 설정한다면 컴파일 시간을 줄일 수 있습니다.

        esModuleInterop : true 로 설정한다면 CommonJS 모듈을 ES6 모듈처럼 가져올 수 있게 해줍니다. 
            예를들어 import * as fs from 'fs' 대신 import fs from 'fs'를 사용할 수 있습니다.

        allowSyntheticDefaultImports : true 로 설정한다면 ES6 모듈을 사용할 때, 기본 내보내기(default export)가 없는 모듈을 default import로 가져올 수 있습니다.

        strict : true 로 설정한다면 TypeScript의 엄격 모드를 활성화합니다. 이는 여러 엄격한 타입 검사를 포함하여 코드 품질을 향상시킵니다.

        forceConsistentCasingInFileNames : true 로 설정한다면 파일 이름의 대소문자를 정확하게 작성하도록 강제합니다. 다른 운영 체제에서 발생할 수 있는 파일 경로 문제를 방지합니다.

        noFallthroughCasesInSwitch : true 로 설정한다면 switch case 문에서 break 를 입력하지 않았을 때 에러가 발생하도록 합니다.
            즉 switch 문에서 비어 있지 않은 Case라면 반드시 break 문이나 return 문으로 해당 Case를 종료시키도록 강제한다.

        module : TypeScript 컴파일러가 모듈을 어떻게 처리할지 설정하는 옵션입니다. 
            이는 프로젝트에서 사용할 모듈 시스템을 지정하며, 컴파일된 JavaScript 파일이 어떻게 모듈을 로드하고 사용할지를 결정합니다.

        moduleResolution : TypeScript 컴파일러가 모듈을 어떻게 해석하고 찾을지를 설정하는 옵션입니다. 
            이는 모듈을 어떻게 찾아서 불러올지를 정의하며, 특정 환경에서 올바르게 모듈을 해석할 수 있도록 도와줍니다.
            classic 을 입력한다면, TypeScript 1.6 이전의 모듈 해석 방식입니다. 이 방식은 주로 기존의 JavaScript 프로젝트와의 호환성을 위해 사용됩니다.
                상대적 경로(./, ../)로 모듈을 찾고, 같은 디렉터리 또는 부모 디렉터리에서 모듈을 찾습니다.
                파일 확장자를 자동으로 추가하지 않으며, index.ts나 index.js 파일을 자동으로 찾지 않습니다.
            node 를 입력한다면, Node.js 모듈 해석 방식을 따릅니다. 이 방식은 Node.js와 호환되며, 주로 Node.js 환경에서 TypeScript를 사용할 때 유용합니다.
                상대적 경로(./, ../)뿐만 아니라, Node.js의 모듈 검색 방식(node_modules 폴더 등)을 사용하여 모듈을 찾습니다.
                파일 확장자를 자동으로 추가하고, 디렉터리를 모듈로 해석할 때 index.ts나 index.js 파일을 자동으로 찾습니다.
                
        resolveJsonModule : TypeScript 컴파일러가 JSON 파일을 모듈로 해석하고 가져올 수 있도록 해주는 설정입니다. 
            이 옵션을 활성화하면, JSON 파일을 TypeScript 코드 내에서 마치 JavaScript 모듈처럼 import할 수 있게 됩니다.
            예를들자면,

            {
            "name": "example",
            "version": "1.0.0"
            }

            위와 같은 json 이 config.json 파일로 저장되어 있다고 할 때,

            import * as config from './config.json';
            console.log(config.name); // "example"
            console.log(config.version); // "1.0.0"

            이렇게 가져와 사용할 수 있는 것입니다.

        isolatedModules : TypeScript 컴파일러가 각 TypeScript 파일을 개별적으로 변환하도록 설정하는 옵션입니다. 
            이 옵션은 주로 Babel과 같은 트랜스파일러와 함께 사용될 때 유용하며, 
            TypeScript의 전체 프로젝트 분석 없이 파일 단위로 변환하기에 빠른 빌드와 변환을 가능하게 합니다.

        noEmit : 컴파일러가 JavaScript 파일 등의 출력 파일들을 만들어 내지 않도록 하는 설정입니다. 
            이는 Babel이나 swc와 같은 또 다른 도구가 TypeScript 파일을 JavaScript 환경에서 실행될 수 있는 파일로 변환하는 작업을 담당할 수 있도록 합니다. 
            이러한 경우에는 TypeScript를 에디터 통합 기능을 제공하기 위한 도구 혹은 소스 코드 타입 체커로만 사용하게 됩니다.

        jsx : JSX 코드를 어떻게 컴파일할지 결정합니다. 이는 오직 .tsx 확장자의 컴파일 결과에만 영향을 줍니다.
            react : .js 파일로 컴파일 됩니다. (JSX 코드는 React.createElement() 함수의 호출로 변환됨)
            react-jsx : .js 파일로 컴파일 됩니다. (JSX 코드는 _jsx() 함수의 호출로 변환됨)
            react-jsxdev : .js 파일로 컴파일 됩니다. (JSX 코드는 _jsx() 함수의 호출로 변환됨)
            preserve : .jsx 파일로 컴파일 됩니다. (JSX 코드가 그대로 유지됨)
            react-native : .js 파일로 컴파일 됩니다. (JSX 코드가 그대로 유지됨)

    include : TypeScript 컴파일러가 포함할 파일이나 디렉터리 목록입니다.

- package.json 파일은,
    Node.js 프로젝트의 필수 파일로, 프로젝트에 대한 메타데이터와 프로젝트에서 사용하는 패키지들의 의존성을 정의합니다. 

    name : 프로젝트의 이름입니다. 패키지를 배포할 때 사용됩니다.
    version : 프로젝트의 버전입니다. 일반적으로 Semantic Versioning을 따릅니다.
    private : 프로젝트가 공개 저장소에 게시되지 않도록 설정하는 데 사용됩니다. 
        값으로 true를 설정하면 해당 프로젝트는 npm 저장소에 퍼블리시되지 않습니다.
        예를들어 이것이 true 일 때, npm publish 명령어로 배포를 시도한다면 오류 메시지가 출력됩니다.
    dependencies : 프로덕션 환경에서 필요한 패키지들을 정의합니다. 패키지 이름과 버전 범위를 지정합니다.
    scripts : 프로젝트에서 자주 사용하는 명령어들을 정의합니다.
        이 명령어들은 터미널에서 npm run <script-name> 혹은 yarn <script-name>을 통해 실행할 수 있습니다. 
        scripts 항목은 프로젝트 작업을 자동화하고 간편하게 관리할 수 있도록 도와줍니다.
        예를 들어, start, build, test 등이 있습니다.
    eslintConfig : package.json 파일 내에서 ESLint 설정을 정의하는 섹션입니다. 
        ESLint는 JavaScript 및 JSX 코드의 스타일과 품질을 유지하기 위해 사용되는 정적 코드 분석 도구입니다. 
        eslintConfig 항목을 통해 프로젝트의 코드 스타일 규칙을 설정하고, 다양한 규칙을 적용할 수 있습니다.
    browserslist : React 프로젝트에서 사용되는 브라우저 지원 설정입니다. 
        이 설정은 주로 Autoprefixer나 다양한 JavaScript 번들러(bundler)들이 지원하는 브라우저의 범위를 정의하는 데 사용됩니다.

        production : 이 속성은 배포(production) 환경에서 지원할 브라우저의 목록을 나타냅니다. 
            각 항목은 브라우저의 사용률을 기준으로 지정됩니다. 
            예를 들어 ">0.2%"는 전 세계 사용률이 0.2% 이상인 모든 브라우저를 포함하며, 
            "not dead"는 사용률이 거의 없는(deprecated) 브라우저를 제외합니다. 
            "not op_mini all"은 Opera Mini 브라우저를 제외하는 조건입니다.
        development : 이 속성은 개발(development) 환경에서 지원할 브라우저의 목록을 나타냅니다. 
            여기서는 각각의 브라우저의 최신 버전만을 지정했습니다. 
            즉, 개발 중에는 Chrome, Firefox, Safari의 각각 최신 버전만을 지원합니다.

- package-lock.json 파일은,
    package-lock.json은 npm이 node_lock 트리 또는 package.json을 수정하는 모든 작업에 대해 자동으로 생성됩니다.
    package-lock.json 파일에서 의존성 설정을 할 때에 특정 버전을 확정하는 것이 아니라 버전 범위를 지정하므로,
    개발자가 개발시에 이상 없이 빌드 완료 후 사용한 정보를 이 파일에 저장하는 것입니다.

- node_modules 폴더는,
    Node.js 프로젝트에서 의존성 모듈들이 설치되는 디렉토리입니다. 
    프로젝트의 package.json 파일에 명시된 의존성 목록을 기반으로, 
    npm 또는 yarn 같은 패키지 매니저가 이 폴더에 필요한 모듈을 다운로드하고 설치합니다.
    이 폴더는 일반적으로 .gitignore 파일에 추가되어 git 저장소에 포함되지 않도록 처리합니다.

- public 폴더는,
    정적 파일들을 저장하는 디렉토리입니다. 
    React 애플리케이션에서는 주로 HTML 파일, 이미지, 폰트, 기타 정적 자산들이 이 폴더에 위치합니다.
    public 이라는 이름답게 외부에 공개되며,
    예를들어 public/favicon.ico 파일의 경우는,
    http://localhost:3000/favicon.ico
    이렇게 해서 바로 접근이 가능합니다.

    favicon.ico : 웹사이트의 아이콘을 나타내는 파일입니다. 
        브라우저의 탭이나 북마크, 즐겨찾기 목록 등에서 웹사이트를 식별할 때 사용됩니다.
        React 애플리케이션에서는 public/index.html 파일에서 favicon.ico 파일을 링크하여 사용합니다. 기본 설정은 다음과 같습니다:

        <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />

        커스터마이징하려면, 새로운 ICO 파일을 생성하여 public 폴더에 복사하고, 기존 파일을 덮어쓰면 됩니다.

    index.html : React 애플리케이션의 진입점인 HTML 파일입니다.
        ReactJs 가 실행되면 가장 먼저 실행되는 html 이자, Single Page Application 인 ReactJs 에서 유일한 HTML 로,
        앞으로 페이지 화면을 만들게 될 src 폴더의 모든 tsx 파일들은 index.html 의 DOM 을 조작함으로써 화면을 구성하게 됩니다.

        HTML 태그의 각 요소들을 확인하겠습니다.

        <!DOCTYPE html> :
            HTML 문서가 HTML5 표준을 따름을 명시합니다.
        <html lang="en"> :
            문서의 기본 언어를 영어(en)로 설정합니다.
        <head> :
            문서의 메타데이터를 포함하는 부분입니다.
        <meta charset="utf-8" /> :
            문서의 문자 인코딩을 UTF-8로 설정하여 모든 문자가 올바르게 표시되도록 합니다.
        <link rel="icon" href="%PUBLIC_URL%/favicon.ico" /> :
            웹사이트의 파비콘(favicon)을 지정합니다. %PUBLIC_URL%는 애플리케이션이 빌드될 때 public 폴더의 URL로 대체됩니다.
        <meta name="viewport" content="width=device-width, initial-scale=1" /> :
            웹페이지가 다양한 장치에서 올바르게 표시되도록 뷰포트(viewport)를 설정합니다.
        <meta name="theme-color" content="#000000" /> :
            브라우저의 주소창이나 탭의 색상을 설정합니다.
        <meta name="description" content="Web site created using create-react-app" /> :
            웹사이트의 설명을 설정하여 검색 엔진 최적화(SEO)에 사용됩니다.
        <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" /> :
            애플 기기에서 웹앱을 홈 화면에 추가할 때 사용되는 아이콘을 설정합니다.
        <link rel="manifest" href="%PUBLIC_URL%/manifest.json" /> :
            웹 애플리케이션의 메타데이터를 포함한 manifest.json 파일의 경로를 설정합니다. 이 파일은 웹앱이 설치될 때 사용됩니다.
        <title>React App</title> :
            웹페이지의 제목을 설정합니다. 브라우저의 탭에 표시됩니다.
        <body> :
            문서의 본문(content)을 포함하는 부분입니다.
        <noscript>You need to enable JavaScript to run this app.</noscript> :
            사용자가 자바스크립트를 비활성화한 경우에 표시되는 메시지입니다. React 애플리케이션은 자바스크립트를 필요로 하므로, 자바스크립트가 비활성화된 경우 사용자에게 이를 알립니다.
        <div id="root"></div> :
            React 애플리케이션의 진입점(root)입니다. React DOM이 이 div 요소를 기준으로 컴포넌트를 렌더링합니다.

    logo192.png, logo512.png : 웹앱 로고 파일입니다.
        각각 192x192, 512x512 사이즈이며, 
        logo192.png 는 index.html 과 manifest.json 에,
        logo512.png 는 manifest.json 에 설정되어 있습니다.
        로고 이미지를 바꾸고 싶다면 동일 사이즈의 이미지 파일을 준비하여 덮어쓰면 됩니다.

    manifest.json : 웹 애플리케이션의 메타데이터를 포함한 JSON 파일로, 웹앱이 설치될 때 사용됩니다. 
        이 파일은 Progressive Web App (PWA)을 지원하는데 중요한 역할을 합니다. 
        PWA는 웹 애플리케이션을 네이티브 앱처럼 사용할 수 있게 해줍니다.

        json 요소들을 살펴보겠습니다.

        short_name :
            공간이 부족한 경우 이름을 짧게 표시하기 위해서 만들어주는 옵션입니다. 보통 메인화면에서 설치된 아이콘의 이름으로 표시됩니다.
        name :
            icon에 표시될 이름을 말합니다. 보통 설치 배너에 표시되며, 검색 키워드로도 쓰입니다.
        icons : 
            애플리케이션의 아이콘을 정의하는 배열입니다. 각 아이콘 객체는 src, sizes, type 속성을 가집니다.
            src: 아이콘 파일의 경로.
            sizes: 아이콘의 크기. 예를 들어 "72x72".
            type: 아이콘 파일의 MIME 타입. 예를 들어 "image/png".
        start_url :
            애플리케이션이 시작되는 URL을 지정합니다. 상대 경로나 절대 경로로 설정할 수 있습니다.
        display :
            애플리케이션이 실행될 때의 모드를 정의합니다.
            fullscreen: 전체 화면 모드.
            standalone: 네이티브 앱처럼 보이는 모드.
            minimal-ui: 최소 UI 모드.
            browser: 일반 브라우저 모드.
        theme_color :
            애플리케이션의 테마 색상을 지정합니다. 브라우저의 주소창이나 툴바 색상으로 사용될 수 있습니다.
        background_color :
            애플리케이션 로딩 화면의 배경색을 지정합니다.

    robots.txt : 웹 크롤러(예: 검색 엔진 로봇)가 사이트의 어떤 부분을 크롤링할 수 있는지 또는 크롤링할 수 없는지 지시하는 텍스트 파일입니다. 
        이 파일은 사이트의 특정 부분에 대한 접근을 제한하거나 허용하는 규칙을 정의하여 검색 엔진 최적화(SEO)와 서버 부하를 관리하는 데 도움을 줍니다.

        User-agent :
            이 디렉티브는 특정 웹 크롤러 또는 모든 크롤러에 대한 규칙을 정의합니다. *는 모든 크롤러를 의미합니다.
        Disallow :
            이 디렉티브는 크롤러가 접근하지 못하도록 금지할 URL 경로를 지정합니다.
            예: Disallow: /private/
                (/private/ 디렉토리 내의 모든 페이지에 대한 접근을 금지합니다.)
        Allow :
            이 디렉티브는 Disallow 규칙이 적용된 경로 내에서 특정 경로를 크롤링할 수 있도록 허용합니다. 
            이 디렉티브는 모든 크롤러가 지원하는 것은 아니며, 주로 Googlebot에서 사용됩니다.
            예: Allow: /public/
                (/public/ 디렉토리 내의 모든 페이지에 대한 접근을 허용합니다.)
        Sitemap :
            이 디렉티브는 사이트맵 파일의 URL을 명시하여, 크롤러가 사이트의 모든 페이지를 더 쉽게 발견하고 인덱싱할 수 있도록 합니다.
            예: Sitemap: https://www.example.com/sitemap.xml

- src 폴더는,
    애플리케이션의 모든 소스 코드가 위치하는 디렉토리입니다. 
    이 폴더는 주로 React 컴포넌트, 스타일시트, 이미지, 기타 자바스크립트 파일 등을 포함합니다. 
    Create React App (CRA)으로 생성된 프로젝트에서는 src 폴더가 기본적으로 설정되며, 
    애플리케이션의 주요 로직과 UI 구성 요소가 이곳에 작성됩니다.

    *.css : css 파일은 말 그대로 스타일을 정의하는 CSS 파일입니다.
        각 css 파일은 각각의 React 화면의 스타일을 정의합니다.
        예를들어 가장 외곽 부분에 속해는 index 의 index.css 는 전역에서 사용되는 css 를 입력하면 되고,
        나머지 css 파일들은 각각의 화면에 속하는 스타일을 작성하면 됩니다.

    react-app-env.d.ts :
        npx create-react-app my-app --template typescript 명령어를 치면 자동으로 생성되는 파일로,
        이를 지우면 process.env.환경변수이름으로 환경변수를 불러오는데 에러가 발생합니다.
        처음 파일이 생성되면 ///<reference types="react-scripts" /> 이라고 딱 한 줄 적혀있습니다.
        이 줄은 TypeScript에게 react-scripts 모듈에서 제공하는 타입 정의를 참조하라고 지시합니다.
        react-scripts는 CRA에서 사용되는 스크립트와 설정을 포함하는 패키지로, 
        React 프로젝트의 빌드, 테스트, 시작 등에 필요한 설정을 포함합니다.
        이 참조를 통해 TypeScript는 react-scripts와 관련된 모든 타입 정의를 사용할 수 있게 됩니다. 
        예를 들어, 웹팩 설정, 환경 변수, Jest 설정 등에 대한 타입 정보를 포함합니다.

    reportWebVitals.ts :
        npx create-react-app my-app --template typescript 명령어를 치면 자동으로 생성되는 파일로,
        React 애플리케이션에서 웹 바이탈(Web Vitals) 성능 측정을 위해 사용되는 파일입니다.

        웹 바이탈은 사용자가 웹 페이지를 로드하고 상호작용할 때의 경험을 측정하는 주요 성능 지표입니다. 
        Google이 정의한 웹 바이탈의 주요 지표는 다음과 같습니다:

        Largest Contentful Paint (LCP): 주요 콘텐츠가 화면에 표시되는 데 걸리는 시간.
        First Input Delay (FID): 사용자가 처음 상호작용할 때의 응답 시간.
        Cumulative Layout Shift (CLS): 예기치 않은 레이아웃 변경의 시각적 안정성.

    setupTests.ts :
        Create React App (CRA) 프로젝트에서 Jest를 사용할 때 테스트 환경을 설정하는 데 필요한 설정 파일입니다. 
        이 파일은 테스트 실행 전에 특정 설정이나 전역적인 설정을 적용할 수 있는 곳입니다. 
        주로 React Testing Library와 같은 도구를 설정하고, Jest의 설정을 추가하는 데 사용됩니다.

    index.tsx :
        이 파일은 CRA(Create React App)에서 TypeScript와 함께 사용되는 기본 파일 중 하나입니다.
        React 애플리케이션의 진입점(entry point) 역할을 하는 파일로, 
        React 애플리케이션의 최상위 컴포넌트를 렌더링하고, 애플리케이션의 전반적인 구성을 설정하는 곳입니다. 
        앞서 설명한 index.html 을 직접 조작하는 typeScript 파일인데, 주요 기능은 아래와 같습니다.

        1. ReactDOM.createRoot를 사용하여 React 애플리케이션의 최상위 컴포넌트를 index.html의 root DOM 요소에 렌더링합니다.
        2. 글로벌 스타일을 적용하거나 전역 컨텍스트를 설정하는 작업을 합니다.
        3. reportWebVitals 를 호출하여 애플리케이션의 성능을 측정하고 기록합니다.

        코드를 살펴보자면,

        const root = ReactDOM.createRoot(
        document.getElementById('root') as HTMLElement
        );
        root.render(
        <React.StrictMode>
            <App />
        </React.StrictMode>
        );

        이것이 전부입니다.
        index.html 에서 root 라는 id 의 태그를 찾고, 이곳에 

        import App from './App';
        
        으로 가져온 루트 컴포넌트를 삽입하는 것 뿐입니다.
        이로써 프로젝트의 다음 흐름은 App 컴포넌트가 가지게 되기에 App.tsx 에서 개발을 진행하면 됩니다.

    App.tsx :
        앞서 index.tsx 에서 설정한 루트 컴포넌트입니다.
        React에서 컴포넌트는 화면이라 생각하면 됩니다.
        React 의 개발은 컴포넌트를 하나씩 작성해나가는 것이라 할 수 있습니다.

        기본적으로

        import React from 'react';
        import logo from './logo.svg';
        import './App.css';

        function App() {
        return (
            <div className="App">
            <header className="App-header">
                <img src={logo} className="App-logo" alt="logo" />
                <p>
                Edit <code>src/App.tsx</code> and save to reload.
                </p>
                <a
                className="App-link"
                href="https://reactjs.org"
                target="_blank"
                rel="noopener noreferrer"
                >
                Learn React
                </a>
            </header>
            </div>
        );
        }

        export default App;

        위와 같은 형태로, 파일명과 동일한 이름의 함수를 작성하면 되는데,
        return 으로 HTML 태그와 매우 유사한 태그를 사용하여 화면을 반환하도록 작성합니다.

- index.tsx 파일에서 <React.StrictMode> 로 감싸여있다면 개발 환경에서 컴포넌트의 useEffect 가 2번 호출됩니다.
    처음 한번은 테스트를 위해 컴포넌트 생성 및 삭제를 수행하고,
    다음으로 컴포넌트를 생성하여 정상 동작을 수행할 것입니다.